<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Appointments</title>
    <link rel="stylesheet" href="/styles.css"> <!-- Link to your CSS -->
</head>
<body>
    <header>
        <h1>Manage Your Appointments</h1>
        <nav>
            <a href="/patients/profile">Profile</a>
            <a href="/logout">Logout</a>
        </nav>
    </header>

    <main>
        <section>
            <h2>Schedule a New Appointment</h2>
            <form id="appointment-form">
                <label for="doctor_id">Select Doctor:</label>
                <select id="doctor_id" name="doctor_id" required>
                    <!-- Options populated by JavaScript -->
                </select>

                <label for="appointment_date">Date:</label>
                <input type="date" id="appointment_date" name="appointment_date" required>

                <label for="appointment_time">Time:</label>
                <input type="time" id="appointment_time" name="appointment_time" required>

                <button type="submit">Schedule Appointment</button>
            </form>
            <div id="appointment-message"></div>
        </section>

        <section>
            <h2>Your Upcoming Appointments</h2>
            <table id="appointments-table">
                <thead>
                    <tr>
                        <th>Doctor</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Appointments populated by server-side rendering or JavaScript -->
                </tbody>
            </table>
        </section>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            // Fetch doctors for the dropdown
            const response = await fetch('/doctors'); // Adjust the endpoint as necessary
            const doctors = await response.json();
            const doctorSelect = document.getElementById('doctor_id');

            doctors.forEach(doctor => {
                const option = document.createElement('option');
                option.value = doctor.id;
                option.textContent = `${doctor.first_name} ${doctor.last_name}`;
                doctorSelect.appendChild(option);
            });

            // Fetch appointments and populate the table
            const appointmentsResponse = await fetch('/appointments');
            const appointments = await appointmentsResponse.json();
            const appointmentsTableBody = document.querySelector('#appointments-table tbody');

            appointments.forEach(appointment => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${appointment.doctor_name}</td>
                    <td>${appointment.appointment_date}</td>
                    <td>${appointment.appointment_time}</td>
                    <td>${appointment.status}</td>
                    <td>
                        <button class="update-button" data-id="${appointment.id}">Update</button>
                        <button class="cancel-button" data-id="${appointment.id}">Cancel</button>
                    </td>
                `;
                appointmentsTableBody.appendChild(row);
            });

            // Handle appointment scheduling
            document.getElementById('appointment-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(e.target);
                const response = await fetch('/appointments', {
                    method: 'POST',
                    body: formData
                });
                const message = await response.text();
                document.getElementById('appointment-message').textContent = message;
                // Reload appointments or add the new one to the table
            });

            // Handle updating appointments
            appointmentsTableBody.addEventListener('click', async (e) => {
                if (e.target.classList.contains('update-button')) {
                    const appointmentId = e.target.dataset.id;
                    // Logic to open a modal or form to update the appointment
                }

                if (e.target.classList.contains('cancel-button')) {
                    const appointmentId = e.target.dataset.id;
                    const response = await fetch('/appointments/cancel', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ appointment_id: appointmentId })
                    });
                    const message = await response.text();
                    document.getElementById('appointment-message').textContent = message;
                    // Optionally reload or update the appointments table
                }
            });
        });
    </script>
</body>
</html>
